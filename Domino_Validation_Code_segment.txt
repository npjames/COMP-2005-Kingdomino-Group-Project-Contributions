   /*
        Comment by Nathan - All of these functions work similarly. Goes through each tile and checks if
        it is a valid option to add the domino to. Created different functions for each orientation for
        ease of understanding
     */
    public void searchForValidPlacesEast(){
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (i == 8) //Invalidates any tile on the right column
                {
                    continue;
                }
                if (gameGrid[i][j].isOccupied() || gameGrid[i+1][j].isOccupied()) //Used to see if either the tile selected or the one next to it is occupied
                {
                    continue;
                }
                /*
                    Following if statements check if tile will violate 5x5 grid.
                 */
                if(totalHeight == 5 && (j < highestYCoord || j > lowestYCoord))
                {
                    continue;
                }
                if(totalWidth == 5 && (i >= rightmostXCoord || i < leftmostXCoord))
                {
                    continue;
                }
                if(totalWidth == 4 && (i > rightmostXCoord || i + 1 < leftmostXCoord))
                {
                    continue;
                }
                else
                {
                    //Statement for checking validity of tile north of rightmost tile
                    if (j == 0) //This is used to make sure that the index does not go out of bounds
                    {
                    }
                    else if (gameGrid[i][j-1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j-1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of rightmost tile
                    if (j == 8) //This is used to make sure that the index does not go out of bounds
                    {
                    }
                    else if (gameGrid[i][j+1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j+1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of rightmost tile
                    if (i == 0) //This is used to make sure that the index does not go out of bounds
                    {
                    }
                    else if (gameGrid[i-1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i-1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of leftmost tile
                    if(j == 8) //This is used to make sure that the index does not go out of bounds
                    {

                    }
                    else if (gameGrid[i+1][j+1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i+1][j+1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile north of leftmost tile
                    if (j == 0) //This is used to make sure that the index does not go out of bounds
                    {
                    }
                    else if (gameGrid[i+1][j-1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i+1][j-1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of leftmost tile
                    if (i == 7) //This is used to make sure that the index does not go out of bounds
                    {
                    }
                    else if (gameGrid[i+2][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i+2][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true); //marks the tile as valid to select
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                }
            }
        }
    }

    public void searchForValidPlacesNorth() {
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (j == 0)
                {
                    continue;
                }
                if (gameGrid[i][j].isOccupied() || gameGrid[i][j - 1].isOccupied())
                {
                    continue;
                }
                /*
                    Following if statements check if tile will violate 5x5 grid.
                 */
                if (totalWidth == 5 && (i > rightmostXCoord || i < leftmostXCoord))
                {
                    continue;
                }
                if(totalHeight == 5 && (j <= highestYCoord || j > lowestYCoord))
                {
                    continue;
                }
                if(totalHeight == 4 && (j < highestYCoord || j - 1 > lowestYCoord))
                {
                    continue;
                }
                else
                {
                    //Statement for checking validity of tile left of southern tile
                    if (i == 0)
                    {
                    }
                    else if (gameGrid[i - 1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i - 1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile right of southern tile
                    if (i == 8)
                    {
                    }
                    else if (gameGrid[i + 1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i + 1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of southern tile
                    if (j == 8)
                    {

                    }
                    else if (gameGrid[i][j + 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j + 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of northern tile
                    if (i == 0)
                    {
                    }
                    else if (gameGrid[i - 1][j - 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i - 1][j - 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile right of northern tile
                    if (i == 8)
                    {
                    }
                    else if (gameGrid[i + 1][j - 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i + 1][j - 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile north of northern tile
                    if (j == 1)
                    {
                    }
                    else if (gameGrid[i][j - 2].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i][j - 2].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                }
            }
        }
    }

    public void searchForValidPlacesWest(){
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (i == 0)
                {
                    continue;
                }
                if (gameGrid[i][j].isOccupied() || gameGrid[i-1][j].isOccupied())
                {
                    continue;
                }
                /*
                    Following if statements check if tile will violate 5x5 grid.
                 */
                if(totalHeight == 5 && (j < highestYCoord || j > lowestYCoord))
                {
                    continue;
                }
                if(totalWidth == 5 && (i > rightmostXCoord || i <= leftmostXCoord))
                {
                    continue;
                }
                if(totalWidth == 4 && (i < leftmostXCoord || i - 1 > rightmostXCoord))
                {
                    continue;
                }
                else
                {
                    //Statement for checking validity of tile right of rightmost tile
                    if (i == 8)
                    {
                    }
                    else if (gameGrid[i + 1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i + 1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile north of rightmost tile
                    if (j == 0)
                    {
                    }
                    else if (gameGrid[i][j-1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j-1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of rightmost tile
                    if (j == 8)
                    {
                    }
                    else if (gameGrid[i][j + 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j + 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of leftmost tile
                    if (i == 1)
                    {
                    }
                    else if (gameGrid[i - 2][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i - 2][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile north of leftmost tile
                    if (j == 0)
                    {
                    }
                    else if (gameGrid[i - 1][j - 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i - 1][j - 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of leftmost tile
                    if (j == 8)
                    {
                    }
                    else if (gameGrid[i-1][j + 1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i-1][j + 1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                }
            }
        }
    }

    public void searchForValidPlacesSouth(){
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (j == 8)
                {
                    continue;
                }
                if (gameGrid[i][j].isOccupied() || gameGrid[i][j+1].isOccupied())
                {
                    continue;
                }
                /*
                    Following if statements check if tile will violate 5x5 grid.
                 */
                if (totalWidth == 5 && (i > rightmostXCoord || i < leftmostXCoord))
                {
                    continue;
                }
                if(totalHeight == 5 && (j < highestYCoord || j >= lowestYCoord))
                {
                    continue;
                }
                if(totalHeight == 4 && (j + 1 < highestYCoord || j > lowestYCoord))
                {
                    continue;
                }
                else
                {
                    //Statement for checking validity of tile north of northern tile
                    if (j == 0)
                    {
                    }
                    else if (gameGrid[i][j-1].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i][j-1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of northern tile
                    if (i == 0)
                    {
                    }
                    else if (gameGrid[i-1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i-1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile right of northern tile
                    if (i == 8)
                    {
                    }
                    else if (gameGrid[i+1][j].getTerritoryType().equals(selectedDomino.getTerritoryTypeA()) || gameGrid[i+1][j].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile left of southern tile
                    if (i == 0)
                    {
                    }
                    else if (gameGrid[i-1][j+1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i-1][j+1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile right of southern tile
                    if (i == 8)
                    {
                    }
                    else if (gameGrid[i+1][j+1].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i+1][j+1].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                    //Statement for checking validity of tile south of southern tile
                    if (j == 7)
                    {
                    }
                    else if (gameGrid[i][j+2].getTerritoryType().equals(selectedDomino.getTerritoryTypeB()) || gameGrid[i][j+2].getCastle() != null)
                    {
                        gameGrid[i][j].setValid(true);
                        kingdom.addMyMouseListener(gameGrid[i][j]);
                        continue;
                    }
                }
            }
        }
    }
}